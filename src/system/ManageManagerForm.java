/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package system;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SIOW HAN BIN
 */
public class ManageManagerForm extends javax.swing.JFrame {

    /**
     * Creates new form ManageManagerForm
     */
    public ManageManagerForm() {
        initComponents();
        loadManagerStaffData();
        loginForm login = new loginForm();
            usernameLbl.setText(login.getusername());
    }
// Load manager staff data from file into the table
    private void loadManagerStaffData() {

        DefaultTableModel model = (DefaultTableModel) managerTbl.getModel();
        model.setRowCount(0);  // Clear existing rows
        try (BufferedReader br = new BufferedReader(new FileReader("user.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] userDetails = line.split(";");
                if (userDetails[3].equals("manager")) { // Only load Manager staff
                    model.addRow(new Object[]{userDetails[0], userDetails[1], userDetails[3]});
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error loading Manager staff data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

   
    public String getSelectedUserID() {
        int selectedRow = managerTbl.getSelectedRow();
        if (selectedRow != -1) {
            return (String) managerTbl.getValueAt(selectedRow, 0); // Get userID from the first column
        }
        return null; // Return null if no row is selected
    }
    // Getter to retrieve the username of the selected row
    public String getSelectedUsername() {
        int selectedRow = managerTbl.getSelectedRow();
        if (selectedRow != -1) {
            return (String) managerTbl.getValueAt(selectedRow, 1); // Get username from the second column
        }
        return null; // Return null if no row is selected
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAddManager = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        managerTbl = new javax.swing.JTable();
        searchBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        searchTxt = new javax.swing.JTextField();
        usernameLbl = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnDeleteManager = new javax.swing.JButton();
        btnEditManager = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnAddManager.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnAddManager.setText("Add New Manager");
        btnAddManager.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddManagerActionPerformed(evt);
            }
        });

        btnLogout.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 102, 51));
        jPanel1.setForeground(new java.awt.Color(255, 102, 51));

        jLabel1.setBackground(new java.awt.Color(255, 102, 102));
        jLabel1.setFont(new java.awt.Font("Segoe UI Symbol", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Manage Manager");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(97, 97, 97))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addContainerGap(9, Short.MAX_VALUE))
        );

        btnBack.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        managerTbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        managerTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "User ID", "User Name", "Role"
            }
        ));
        jScrollPane1.setViewportView(managerTbl);

        searchBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        clearBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        usernameLbl.setText("jLabel2");

        jLabel2.setText("Welcome to Manage Manager");

        btnDeleteManager.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnDeleteManager.setText("Delete Manager");
        btnDeleteManager.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteManagerActionPerformed(evt);
            }
        });

        btnEditManager.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnEditManager.setText("Edit Manager");
        btnEditManager.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditManagerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usernameLbl)
                .addGap(153, 153, 153)
                .addComponent(btnLogout)
                .addGap(22, 22, 22))
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddManager)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeleteManager)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditManager))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clearBtn)
                        .addGap(15, 15, 15)
                        .addComponent(searchTxt)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(usernameLbl)
                        .addComponent(jLabel2)))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddManager)
                    .addComponent(btnDeleteManager)
                    .addComponent(btnEditManager))
                .addContainerGap(217, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddManagerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddManagerActionPerformed
        // TODO add your handling code here:
        new ManagerRegisterForm().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnAddManagerActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        new loginForm().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        new adminDashboardForm().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
                                                     
    String search = searchTxt.getText().trim(); // Get the input from the search field

    if (search.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please enter a search term.", "Error", JOptionPane.ERROR_MESSAGE);
        return; // Exit if the search field is empty
    }

    // Clear the current table data
    DefaultTableModel model = (DefaultTableModel) managerTbl.getModel();
    model.setRowCount(0);

    try {
        // Open the file and read the content
        FileReader fr = new FileReader("user.txt");
        BufferedReader br = new BufferedReader(fr);
        String read;

        while ((read = br.readLine()) != null) {
            String[] userDetails = read.split(";");

            // Check if the record is a manager and matches the search term (by userID or username)
            if (userDetails[3].equalsIgnoreCase("manager") &&
                (userDetails[0].contains(search) || userDetails[1].contains(search))) {
                
                // Add matching rows to the table
                model.addRow(new Object[]{userDetails[0], userDetails[1], userDetails[3]});
            }
        }

        br.close(); // Close BufferedReader
        fr.close(); // Close FileReader

        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No matching manager found.", "Search Result", JOptionPane.INFORMATION_MESSAGE);
        }

    } catch (IOException e) {
        JOptionPane.showMessageDialog(null, "Error searching manager: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }


    }//GEN-LAST:event_searchBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        // TODO add your handling code here:
            searchTxt.setText("");
            // Reload the table to show all Manager (without any filter)
    DefaultTableModel model = (DefaultTableModel) managerTbl.getModel();
    model.setRowCount(0); // Clear current table data
    
    try {
        // Open the file and read the content
        FileReader fr = new FileReader("user.txt");
        BufferedReader br = new BufferedReader(fr);
        String read;

        while ((read = br.readLine()) != null) {
            String[] userDetails = read.split(";");

            // Check if the user is a manager
            if (userDetails[3].equalsIgnoreCase("manager")) {
                // Add all managers back to the table
                model.addRow(new Object[]{userDetails[0], userDetails[1], userDetails[3]});
            }
        }

        br.close(); // Close BufferedReader
        fr.close(); // Close FileReader

    } catch (IOException e) {
        JOptionPane.showMessageDialog(null, "Error loading manager data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_clearBtnActionPerformed

    private void btnDeleteManagerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteManagerActionPerformed
        // TODO add your handling code here:
    try {
        // Get the selected row in the table
        int selectedRow = managerTbl.getSelectedRow();
        
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Please select a manager to delete.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit if no row is selected
        }
        
        String userID = (String) managerTbl.getValueAt(selectedRow, 0); // Get userID from the selected row
        
        // Open the file and read the content
        FileReader fr = new FileReader("user.txt");
        BufferedReader br = new BufferedReader(fr);
        String read;
        
        ArrayList<String> userList = new ArrayList<>();
        
        while ((read = br.readLine()) != null) {
            String[] userDetails = read.split(";");
            
            // If the userID does not match the one to delete, keep the record
            if (!userDetails[0].equals(userID)) {
                userList.add(read); // Add the non-deleted user back to the list
            }
        }
        
        br.close(); // Close BufferedReader
        fr.close(); // Close FileReader
        
        // Write updated list back to file
        FileWriter fw = new FileWriter("user.txt");
        BufferedWriter bw = new BufferedWriter(fw);
        
        for (String user : userList) {
            bw.write(user + "\n");
        }
        
        bw.close(); // Close BufferedWriter
        fw.close(); // Close FileWriter
        
        JOptionPane.showMessageDialog(null, "Manager deleted successfully!");

        // Reload the staff table after deletion
        loadManagerStaffData(); 
        
    } catch (IOException e) {
        JOptionPane.showMessageDialog(null, "Error deleting staff: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }


    }//GEN-LAST:event_btnDeleteManagerActionPerformed

    private void btnEditManagerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditManagerActionPerformed
        // TODO add your handling code here:
     int selectedRow = managerTbl.getSelectedRow();

    if (selectedRow != -1) {
        // Get userID and pass it along with ManageManagerForm instance
        String userID = getSelectedUserID();
        String username = getSelectedUsername();
        
        // Pass both userID and the instance of ManageManagerForm to ManagerUpdateForm
        ManagerUpdateForm updateForm = new ManagerUpdateForm(this,userID, username);
        updateForm.setVisible(true);
        this.dispose();  // Optionally close the ManageManagerForm
    } else {
        JOptionPane.showMessageDialog(null, "Please select a Manager to edit.");
    }
    }//GEN-LAST:event_btnEditManagerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageManagerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageManagerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageManagerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageManagerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageManagerForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddManager;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDeleteManager;
    private javax.swing.JButton btnEditManager;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton clearBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable managerTbl;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField searchTxt;
    private javax.swing.JLabel usernameLbl;
    // End of variables declaration//GEN-END:variables
}
